---
import Layout from "src/layouts/layout.astro";
import CarCard from "@components/CarCard.astro";
import ky from 'ky';
const title = "Парк авто";

// Функция для получения даты в формате "DD.MM.YYYY"
const formatDate = (date) => {
  const day = String(date.getDate()).padStart(2, '0');
  const month = String(date.getMonth() + 1).padStart(2, '0'); // Месяцы начинаются с 0
  const year = date.getFullYear();
  return `${day}.${month}.${year}`;
};

// Получаем текущую дату + 3 дня для from-date и + 8 дней для to-date
const fromDate = new Date();
fromDate.setDate(fromDate.getDate() + 3);
const toDate = new Date(fromDate);
toDate.setDate(toDate.getDate() + 5);

let cars = null;
let error = null;

try {
  // Выполняем запрос к API
  const response = await ky.get(`https://new.mycarrental.ru/api/v2/search_cars?from-id=10&to-id=10&to-date=${formatDate(toDate)}&from-date=${formatDate(fromDate)}&from-time=12%3A00&to-time=12%3A00&promocode=null&page=1&per_page=8`).json();
  
  // Ожидаем массив автомобилей в поле vehicles
  cars = response?.vehicles || [];
} catch (err) {
  error = err.message;
}
---

<Layout title={title}>
  {error ? (
    <div>Error: {error}</div>
  ) : (
    <div>
      <!-- Фильтр по классам авто с кнопками -->
      <div class="filter-section m-4 flex flex-wrap gap-2 justify-center">
        <button class="filter-button" data-id='1'>Комфорт класс</button>
        <button class="filter-button" data-id='2'>Бизнес</button>
        <button class="filter-button" data-id='3'>Промо</button>
        <button class="filter-button" data-id='4'>Кроссоверы</button>
        <button class="filter-button" data-id='5'>Люкс</button>
        <button class="filter-button" data-id='6'>Внедорожники</button>
        <button class="filter-button" data-id='7'>Минивены</button>
      </div>

      <!-- Контейнер для карточек и сообщения -->
      <div class="cars-grid p-4" id="cars-container">
        {cars.length > 0 ? (
          cars.map(car => (
            <CarCard car={car} data-id={car.class_id} /> // Предполагается, что у машины есть поле class_id для идентификации класса
          ))
        ) : (
          <p class="mx-4">Машин больше нет</p>
        )}
      </div>
      <p id="no-cars-message" style="display: none;" class="mx-4">Машин выбранного класса нет</p>
    </div>
  )}
</Layout>

<!-- Добавляем стили -->
<style>
  .cars-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 16px;
  }
  .filter-button {
    padding: 10px 15px;
    border: 1px solid #ccc;
    border-radius: 8px;
    background-color: #f5f5f5;
    cursor: pointer;
    transition: background-color 0.6s;
  }
  .filter-button.active {
    background-color: #e60000;
    color: white;
  }
</style>

<!-- Добавляем скрипт для фильтрации и обработки URL параметров -->
<script>
  document.addEventListener('DOMContentLoaded', function () {
    const filterButtons = document.querySelectorAll('.filter-button');
    const carsContainer = document.getElementById('cars-container');
    const cars = Array.from(carsContainer.children);
    const noCarsMessage = document.getElementById('no-cars-message');
    let selectedClasses = [];

    // Функция для фильтрации карточек
    function filterCars() {
      let visibleCars = 0;
      cars.forEach(car => {
        const carClassId = car.getAttribute('data-id');

        if (selectedClasses.length === 0 || selectedClasses.includes(carClassId)) {
          car.style.display = 'block';
          visibleCars++;
        } else {
          car.style.display = 'none';
        }
      });

      // Показываем/скрываем сообщение
      noCarsMessage.style.display = visibleCars === 0 ? 'block' : 'none';
    }

    // Считываем параметр class из URL
    const urlParams = new URLSearchParams(window.location.search);
    const initialClass = urlParams.get('class');

    // Если есть параметр class, активируем соответствующую кнопку и фильтруем
    if (initialClass) {
      selectedClasses.push(initialClass);
      filterButtons.forEach(button => {
        if (button.getAttribute('data-id') === initialClass) {
          button.classList.add('active');
        }
      });
      filterCars();
    }

    // Добавляем обработчик клика для кнопок фильтров
    filterButtons.forEach(button => {
      button.addEventListener('click', function () {
        const classId = this.getAttribute('data-id');
        
        // Добавляем или удаляем класс из выбранных
        if (selectedClasses.includes(classId)) {
          selectedClasses = selectedClasses.filter(id => id !== classId);
          this.classList.remove('active');
        } else {
          selectedClasses.push(classId);
          this.classList.add('active');
        }

        filterCars();
      });
    });
  });
</script>
